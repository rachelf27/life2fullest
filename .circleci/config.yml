version: 2.1
jobs:
  build:
    docker:
      - image: cimg/node:20.3.0

    working_directory: ~/repo

    steps:
      - checkout

      # Install Terraform
      - run:
          name: Install Terraform
          command: |
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list > /dev/null
            sudo apt-get update && sudo apt-get install -y terraform

      # Install AWS CLI
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get install python3-pip
            pip3 install awscli --upgrade --user
            echo "export PATH=$PATH:~/.local/bin" >> $BASH_ENV
            aws --version

      # Install Kubectl
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/

      # Clear NPM Cache
      - run:
          name: Clear npm cache
          command: npm cache clean --force

      # Install dependencies
      - run:
          name: Install dependencies
          command: npm install

      # Check Installed dependencies - DEBUG
      - run:
          name: Check installed dependencies
          command: npm list

      # Set up and start Docker service
      - setup_remote_docker:
          version: 20.10.18

      # Check Docker Credentials - DEBUG *** REMOVE
      - run:
          name: Check DOCKER_PASSWORD
          command: echo -e $DOCKER_PASSWORD

      # Pull and Build Docker images: Ensures the deployment uses the latest Docker images.
      - run:
          name: Pull and Build Docker images
          command: |
            echo $DOCKER_PAT | docker login -u $DOCKER_USERNAME --password-stdin https://index.docker.io/v1/
            docker pull rachelvf27/life2fullest-frontend:latest
            docker build -t rachelvf27/life2fullest-frontend:latest -f client/frontend.dockerfile .
            docker pull rachelvf27/life2fullest-backend:latest
            docker build -t rachelvf27/life2fullest-backend:latest -f backend.dockerfile .

      # Initialize and Provision Resources: Initializes and provisions all AWS resources.
      - run:
          name: Initialize and Provision Resources
          command: |
            export AWS_ACCESS_KEY=$AWS_ACCESS_KEY
            export AWS_SECRET_KEY=$AWS_SECRET_KEY
            cd terraform
            terraform init
            terraform apply -auto-approve

      # Populate Initial Data: Populates initial data into provisioned resources.
      - run:
          name: Populate Initial Data
          command: |
            export AWS_ACCESS_KEY=$AWS_ACCESS_KEY
            export AWS_SECRET_KEY=$AWS_SECRET_KEY
            pwd
            node data/populateData.js

      # Configure the EKS Cluster: Configures the Amazon Elastic Kubernetes Service (EKS) cluster.
      - run:
          name: Configure the EKS Cluster
          command: aws eks update-kubeconfig --name e-com-app-eks-cluster

      # Verify the Cluster and Nodes: Verifies that your kubectl command is configured correctly.
      - run:
          name: Verify the Cluster and Nodes
          command: |
            kubectl cluster-info
            kubectl get nodes

      # Deploy applications: Deploy each application.
      - run:
          name: Deploy to Kubernetes
          command: |
            aws eks update-kubeconfig --name e-com-app-eks-cluster
            kubectl apply -f k8s/frontend-deployment.yaml
            kubectl apply -f k8s/backend-deployment.yaml

      # Deploy Fluent Bit for logs collection: Deploys Fluent Bit for log collection.
      - run:
          name: Deploy Fluent Bit
          command: |
            kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-monitoring/fluent-bit/fluent-bit.yaml

      # Get Pods and Check Logs: Retrieves pod information and checks logs.
      - run:
          name: Get Pods and Check Logs
          command: |
            kubectl get pods
            kubectl logs life2fullest-frontend-*
            kubectl logs life2fullest-backend-*

      # Expose the application: Expose the deployed services.
      - run:
          name: Expose the application
          command: |
            kubectl get services
            kubectl get svc frontend-deployment
            kubectl get svc backend-deployment

      # Destroy Resources
      - run:
          name: Destroy all resources
          command: |
            export AWS_ACCESS_KEY=$AWS_ACCESS_KEY
            export AWS_SECRET_KEY=$AWS_SECRET_KEY
            cd terraform
            pwd
            echo "Terraform destroy output:"
            terraform destroy -auto-approve

      # Separate clean up task if a previous step fails and does not continue
      - run:
          name: Cleanup Resources when on_fail
          command: |
            export AWS_ACCESS_KEY=$AWS_ACCESS_KEY
            export AWS_SECRET_KEY=$AWS_SECRET_KEY
            cd terraform
            pwd
            echo "Terraform destroy output:"
            terraform destroy -auto-approve
          when: on_fail

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
