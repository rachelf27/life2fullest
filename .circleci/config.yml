version: 2.1
jobs:
  build:
    docker:
      - image: cimg/node:20.3.0

    working_directory: ~/repo

    steps:
      - checkout

      # Install Terraform
      - run:
          name: Install Terraform
          command: |
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list > /dev/null
            sudo apt-get update && sudo apt-get install -y terraform
      
      # Install dependencies
      - run:
          name: Install dependencies
          command: npm install

      # Set up and start Docker service
      - setup_remote_docker:
          version: 20.10.18

      - run:
          name: Check DOCKER_PASSWORD
          command: echo -e $DOCKER_PASSWORD

      # Pull and Build Docker images
      - run:
          name: Build and push Docker image
          command: |
            echo $DOCKER_PAT | docker login -u $DOCKER_USERNAME --password-stdin https://index.docker.io/v1/
            docker pull rachelvf27/life2fullest-frontend:2
            docker build -t rachelvf27/life2fullest-frontend:2 -f client/frontend.dockerfile .
            docker pull rachelvf27/life2fullest-backend:2
            docker build -t rachelvf27/life2fullest-backend:2 -f backend.dockerfile .

      - run:
          name: Debug workspace directory structure
          command: |
            ls terraform

      - run:
          name: Check AWS Keys
          command: |
            echo -e $AWS_ACCESS_KEY
            echo -e $AWS_SECRET_KEY

      # Initialize Terraform Provider
      - run:
          name: Run Terraform init to initialize provider
          command: |
            export AWS_ACCESS_KEY=$AWS_ACCESS_KEY
            export AWS_SECRET_KEY=$AWS_SECRET_KEY
            cd terraform
            pwd
            terraform init

      # Provision Networking Resources
      - run:
          name: Provision Networking Resources
          command: |
            export AWS_ACCESS_KEY=$AWS_ACCESS_KEY
            export AWS_SECRET_KEY=$AWS_SECRET_KEY
            cp terraform/{provider.tf,variables.tf} terraform/networking/
            cd terraform/networking/
            pwd
            terraform init
            echo "Terraform plan output:"
            terraform plan
            echo "Terraform apply output:"
            terraform apply -auto-approve
            sleep 60

      # Run EKS Cluster (Deploy)
      - run:
          name: Deploy EKS Cluster
          command: |
            export AWS_ACCESS_KEY=$AWS_ACCESS_KEY
            export AWS_SECRET_KEY=$AWS_SECRET_KEY

      # Destroy Resources
      - run:
          name: Destroy all resources
          command: |
            export AWS_ACCESS_KEY=$AWS_ACCESS_KEY
            export AWS_SECRET_KEY=$AWS_SECRET_KEY
            cd terraform/networking/
            pwd
            echo "Terraform destroy output:"
            terraform destroy -auto-approve
      
      # Separate clean up task if a previous step fails and does not continue
      - run:
            name: Cleanup Resources when on_fail
            command: |
              export AWS_ACCESS_KEY=$AWS_ACCESS_KEY
              export AWS_SECRET_KEY=$AWS_SECRET_KEY
              cd terraform/networking/
              pwd
              echo "Terraform destroy output:"
              terraform destroy -auto-approve
            when: on_fail

workflows:
  version: 2
  build-deploy:
    jobs:
      - build